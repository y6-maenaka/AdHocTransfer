
AdHocTrnafer - ファイル送受信プログラム　
P2P動作します
元(オリジナル)ファイルは複数のブロックファイルに分割され保管、送受信される(この際メタデータを持つKeyファイルも作成される)
Socketの学習用に作ったプログラムなので理想的なプロトコル選択をしていない
Winnyの部分的下位互換ツール



送信側 -ファイル管理-概要-
０、オリジナルファイルからブロックファイルとキーファイルを作成する ファイルをアップロードした際に一度だけ行う
１、送信相手と制御用コネクション（TCP)を張る この際SocketのQサイズの変更やRSA鍵交換、AES鍵の交換、転送用UDPのポート番号の共有を行う
    { TCP,UDP問わず基本的にソケットはノンブロッキング＆非同期I/Oに変更する コマンドが到着したらSIGIOで割り込む }
    相手からブロックリクエストコマンドが送られてくるまで待機する
２、相手からリクエストのあったブロックファイルをファイル転送用コネクション(UDP)で送信する ファイルがない場合はファイル無しのコマンドを送る
３、ファイル完成メッセージが届いたら制御用、送信用コネクションを閉じる


受信側-ファイル管理-概要-
１、制御用コネクション開通のためにポートバインドした状態で待つ
２、キーファイルを受信する
３、キーファイルのブロックフラグ情報（ブロックファイルの有無集合）を元にオリジナルファイル復元のために必要なブロックファイルをリクエストする   (ブロックフラグと受信済みブロックフラグのXOR、前２つとファイル不存在フラグのANDを取りビットが１立ったらリクエストする)
４、受信したブロックファイルを複合、ハッシュチェックし、ブロックを結合する 　複合されたブロックは再び受信者のAESキーによって再び暗号化される。
５、ブロックが全て到着or相手が保持しているブロックファイルが全て送信されるとブロックからオリジナルファイルを復元する
６、オリジナルファイル完成メッセージを送信してコネクションを閉じる



(ブロックファイル) :オリジナルファイルを先頭から一定のサイズで切り取ったもの。　また、切り取ったデータのハッシュ値を持つ　　ハッシュ値　＋　部分データ　　UDPの最大転送量に収まるようファイルサイズは約64kB 　ファイルを分割して持つため、再送やネットワーク内にファイルが散らばっていてもそれらのファイルを集めることで復元が容易になる
ブロック名はオリジナルファイル全体のダイジェスト値

(キーファイル) : オリジナルファイルのファイル名、サイズ、作成日、全体ハッシュ値、ブロック情報などを持つ


セキュリティ
 / ブロックファイル,キーファイルは共にAES(128bit)で暗号化する
 / AESのキーは制御コネクション開通後RSAで暗号化して送信する -> キーは.config/.aconf Pemファイルも.config/*pem
 / ハッシュ値(ダイジェスト)の算出にはSHA512を用いる


ネットワーク
 / 基本的にノンブロッキング＆非同期I/O Socketに設定しブロッキングしないようにしてある パケットの到着はSIGIOで割り込み対応したハンドラを設定する



構成
 / 送信したいファイル -> UploadFolder/
 / 受信したファイル -> DownloadFolder/
 / ブロックファイル -> BlockFolder/
 / キーファイル -> KeyFolder/
 / 設定ファイル -> .config/


要修正箇所
 / ファイルパスの確保サイズを255にしている　ファイル名が255だった場合に溢れる
 / パケットが本プログラムのものか判断するのに簡単なシンボルでしか見分けてない
 / char(unsigned char)とvoidをかなりテキトウに使い分けている


※　受信者をサーバ側、送信者をクライアントとしている


※展望
 / ブロックファイルとキーの送受信記録をブロックチェーンに書き込むようにする → ファイルの検索をブロックチェーンを調べることで実現する


※ 未完成
